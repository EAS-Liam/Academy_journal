    Task 5 is to start using Chef to automate the process of the previous tasks. 
    With this one we will exclusively be using chef-client and running the recipies locally.
    In the future we will be repeating these steps using chef server.

    Starting out I installed chef on a VM for testing.
    On this VM I setup a new chef repo, generated a new cookbook called gateway.
chef generate cookbook -b gateway
    The -b flag on the generate command ensures that a Berkshelf file is created along with the cookbook.

    Using the Berkshelf I can add the iptables cookbook from the supermarket.
berks install
    Running this command will install any cookbooks pointed at in the berks file from the supermarket.

    From my gateway cookbook I needed to run the vendor command to pull the iptables cookbook from the cach and into my repo.
berks vendor ../
    Running the vendor command needs to be run from my cookbook but the ../ ensures that the iptabels cookbook is placed in the cookbooks directory rather than nesting it in my own cookbook.

    With the iptables cookbook installed I needed to add it as a dependancy in the metadata.rb file of my gateway cookbook.

    Now my recipe in my gateway cookbook can use the iptables recipies.

    I am able to run the recipes within the installed iptables cookbook by overwriting the runlist.
chef-client -z -o recipe[iptables::default]
    This will override the default run list and specifically run the default recipe in the iptables cookbook.
    I can use this method to run each of the recipes in the iptables cookbook but this isn't an ideal solution.
    I need to work out how I can have my recipe run them instead so that when I override with my recipe it will run the iptables recipes in turn.

    The other issue I still have is that these recipes will be running with default setups. I need to work out how I pass in the attributes to have them configure the settings in the way that I need.
    Then when I run my recipe it can configure the settings of the iptables and apply them using the iptables cookbook from the chef supermarket.

    Aftre spending some time looking through the github page of the iptables cookbook I inspected the test files they had, these files have helped shed some light on how I can set some attributes.

    Inside of my recipe I now attempt to set some iptables rules.
    
iptables_rule 'FORWARD ens160' do
        table :filter
        chain :FORWARD
        ip_version :ipv4
        jump 'ACCEPT'
        in_interface 'ens160'
end

    Above is an example of how I am attempting to set the forward rule for the ens160 network interface.

    After some playing around and troubleshooting I finally managed to get this running and now when I run my recipe it disables and flushes the current iptables rule set and then setups and configures the iptables with my ruleset.

    The next stage was a write some lines to a few config files. This tripped me up for a little while as I could not seem to fine a nice Chef based way to append contect to a file or edit existing lines. I found some results on inserting bash into your recipe to do this but that would defeat the whole point of this task so I didn't want to have to use it unless no other solution was found.
    Lucky I came across a result that showed hot to do it the pure Ruby way which appealed to me a lot more than using bash.
    This method let me insert a Ruby block into my chef recipe and just use ruby code to open and edit file.
    By using Ruby's file edit functionality I get a lot of usful options like the ability to only insert a line if no line like it already exists or replace/delete existing lines. This used correctly would give me a lot of control over how I wish to insert my content into the configuration files that I wish to edit.

ruby_block "insert_line" do
  block do
          file = Chef::Util::FileEdit.new("/etc/sysctl.conf")
          file.insert_line_if_no_match("net.ipv4.ip_forward=1", "net.ipv4.ip_forward=1")
          file.write_file
  end
end

    Above is an example of one of the files I needed to edit and how I do it.
    using a ruby_block I specify the file I want to edit, then use the insert line if no match file insert method which allows me to give an expression to search for and if there are no matches then I can specify what I want to add.
    Then simply write that file.

    The ruby_block can also contain multiple blocks inside so I can have a block for each file that needs to be edited all inside the single ruby_block.